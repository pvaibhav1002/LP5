import pandas as pd
df = pd.read_csv('datasets/BostonHousing.csv')
df.head()
df.shape
df.info()
df.describe()
df = df.dropna()
df.duplicated().sum()
x = df.drop(columns=['medv'])
y = df['medv']
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_scaled = sc.fit_transform(x)
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x_scaled,y,test_size=0.2,random_state=1)
import tensorflow
from tensorflow import keras
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense
model = Sequential()

model.add(Dense(128,activation='relu',input_shape=(13,)))
model.add(Dense(64,activation='relu'))
model.add(Dense(28,activation='relu'))
model.add(Dense(1,activation='linear'))
model.summary()
model.compile(loss='mse',optimizer='adam',metrics=['accuracy'])
model.fit(x_train,y_train,epochs=50,validation_split=0.2)
pred = model.predict(x_test)
from sklearn.metrics import mean_squared_error
mean_squared_error(y_test,pred)
import matplotlib.pyplot as plt
import seaborn as sns
plt.figure(figsize=(12,8))
sns.heatmap(df.corr(),annot=True,fmt=".2f",cmap ="coolwarm")

import matplotlib.pyplot as plt

min_val = min(y_test.min(), pred.min())
max_val = max(y_test.max(), pred.max())
plt.figure(figsize=(10, 6))
plt.scatter(y_test, pred)
plt.xlabel('Actual Values (y_test)')
plt.ylabel('Predicted Values (y_pred)')
plt.title('Actual vs Predicted Values')
plt.plot([min_val, max_val], [min_val, max_val])
# plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red', linestyle='--', linewidth=2)
plt.show()